Implementation Guide
====================

The implementation of DYFI Version 4 features a number of changes from previous versions to bring it up-to-date with modern programming standards: 

- Development is now in Github, an open-source repository. 

- The codebase now uses Python in line with coding standards of other USGS earthquake products. 

- Graphics rendering has moved from Generic Mapping Tools (GMT) to Leaflet rendering for map products, and D3 for graph products.

- The database is now implemented in Sqlite3 for its lighter resource footprint.


Installation
------------

DYFI installation should be straightforward. Miniconda (https://conda.io) is the preferred package and environment manager. The included install script (`install.sh`) uses *conda* to install the required packages automatically.

The file `environment.yml` file lists the DYFI dependencies.

Python modules:

==========  =======  =============================================
apng                 For :py:obj:`makemovie.py`
codecov              For debugging only
defusedxml  0.5.0+   For creating :py:obj:`contents.xml`
geopy       1.11.0+  Use great_circle for filtering and graphing
geojson     1.3.3+   For output products
numpy       1.11.2   Numerical manipulation in :py:obj:`graph.py`
pytest               For debugging only
pytest-cov           For debugging only
pyyaml               For configuration files
sqlite               Implements the DYFI database
==========  =======  =============================================

Additional dependencies
-----------------------

- PhantomJS <http://phantomjs.org/) renders maps into static images (PNG). Normally, the :file:`install.sh` script installs this via `conda`.

- Leaflet (http://leafletjs.com) is used to render maps from GeoJSON-formatted data. DYFI installs Leaflet locally in the `leaflet/inc` directory. You can update those Leaflet components manually or use a CDN for the latest version (see the commented portion of the `leaflet/viewer.html` file for an example of invoking Leaflet via CDN.)

- utm (https://pypi.python.org/pypi/utm) is a Python package for converting latitude/longitude coordinates into UTM (Universal Transverse Mercator) strings. DYFI includes a local version of this module in the directory `dyfi/thirdparty/utm`.

Configuration file
------------------

The DYFI4 configuration file :file:`config.yml` is in the YAML file format (http://yaml.org).

Most DYFI4 executables can be called with the --config flag to use another, custom configuration file (for testing, for example.)

The file has five sections:

- *db:* This describes the location and type of the DYFI database (see below).

- *directories:* This has links to the data directories.

  - *data:* This points to the output directories. The DYFI4 products for each event ID are stored here, under its own event ID subdirectory.

  - *leaflet:* This points to the directory where Leaflet processing is done. See :obj:`Generation of map products`.

- *executables:*

- *products:* 

- *filter:* This holds settings for filtering entries (to reject bogus or suspect ones). See :obj:`Filtering of entries`.

The DYFI database
-----------------

The DYFI database is currently implemented as a Sqlite3 database. A sample set of databases is included with installation in */tests/db/*. 

We recommend that the tables be placed in a directory such as */db/*. To change the database location, modify the settings for each database file in :file:`config.yml` file under *db:files*. Each table is a separate file.

For details on the various database tables see :doc:`Database operations` in the Technical Guide.

Event table
+++++++++++

==========   ===========================
File         :file:`event.db`
Table name   *event*
==========   ===========================

This table holds data for individual earthquake events; most importantly, event earthquake location and time. Each row corresponds to one event.

This table is normally populated by event information from the USGS Comprehensive Earthquake Catalog, or ComCat (https://earthquake.usgs.gov/data/comcat/). This table holds data information for individual earthquake events. A sample table is included (beginning from 2015). 

Extended tables
+++++++++++++++

==========   ===========================
File         :file:`extended_NNNN.db`
Table name   *extended_NNNN*
==========   ===========================

This table holds data for DYFI felt data. Each row corresponds to one user response. This table is populated from the DYFI Questionnaire (see https://earthquake.usgs.gov/data/dyfi/background.php).

Because of the size of the DYFI response data (2 million+ responses as of 2018), each year of data is stored in a separate file. The files and tables are named :file:`extended_NNNN.db` and *extended_NNNN* where NNNN is the 4 digit year. The earliest provided year is 2003. Events before this are stored in the file :file:`extended_pre.db` in the table *extended_pre*.

Sample extended tables for 2015 and 2016 are included, with personally identifiable information (PII) redacted.


Generation of map products
--------------------------

The DYFI 'signature product' is no longer a static image but a GeoJSON file. This file contains the aggregated data as GeoJSON Features with coordinates for plotting and corresponding intensities (see the :obj:`Product Guide`). 

The USGS Web Pages use the `Leaflet` rendering engine to display the maps, along with a suitable basemap. Users may use other rendering engines, such as `OpenLayers`, or a GIS application.

Creation of static images
-------------------------

.. note::

    The `PhantomJS` package must be installed to create static images. This is a change from the previous version of DYFI which used Generic Mapping Tools (GMT) for plotting and map generation.

DYFI uses PhantomJS to turn Leaflet-based maps into static images. This section outlines the procedure.

1. The :py:obj:`Aggregate` module creates the aggregated data in GeoJSON format aggregated entries and the computed intensities.

2. The :py:obj:`Map` class adds the event data (epicentral location and magnitude).

3. The :py:obj:`Map.toImage` saves the GeoJSON data into a temporary file in the :file:`leaflet` directory.

4. The file :file:`leaflet/viewer.html` is an HTML Leaflet file that loads the GeoJSON file and renders the map. By default, the open source `OpenStreetMaps` basemap is used.

5. `PhantomJS` is run on the HTML page. This renders the HTML into a static PNG file.

Auxillary functions
-------------------

The following topics are beyond the scope this CORE manual and are described elsewhere.


- USGS event page integration

- Event triggering

- Implementation of the questionnaire

- Transfer of user data to the backend servers

- Product distribution: PDL, Event Pages

